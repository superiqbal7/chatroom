[{"/Users/hello/Projects/webrtc/chat-app/src/reportWebVitals.ts":"1","/Users/hello/Projects/webrtc/chat-app/src/App.tsx":"2","/Users/hello/Projects/webrtc/chat-app/src/pages/CreateRoom.tsx":"3","/Users/hello/Projects/webrtc/chat-app/src/pages/ChatRoom.tsx":"4"},{"size":425,"mtime":1610514964780,"results":"5","hashOfConfig":"6"},{"size":539,"mtime":1610956424359,"results":"7","hashOfConfig":"6"},{"size":314,"mtime":1610956239530,"results":"8","hashOfConfig":"6"},{"size":5794,"mtime":1610978589940,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nzk109",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/hello/Projects/webrtc/chat-app/src/reportWebVitals.ts",[],"/Users/hello/Projects/webrtc/chat-app/src/App.tsx",["19","20"],"/Users/hello/Projects/webrtc/chat-app/src/pages/CreateRoom.tsx",[],"/Users/hello/Projects/webrtc/chat-app/src/pages/ChatRoom.tsx",["21"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 50%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Messages = styled.div`\n  width: 100%;\n  height: 60%;\n  border: 1px solid black;\n  margin-top: 10px;\n  overflow: scroll;\n`;\n\nconst MessageBox = styled.textarea`\n  width: 100%;\n  height: 30%;\n`;\n\nconst Button = styled.div`\n  width: 50%;\n  border: 1px solid black;\n  margin-top: 15px;\n  height: 5%;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: black;\n  color: white;\n  font-size: 18px;\n`;\n\nconst MyRow = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n`;\n\nconst MyMessage = styled.div`\n  width: 45%;\n  background-color: blue;\n  color: white;\n  padding: 10px;\n  margin-right: 5px;\n  text-align: center;\n  border-top-right-radius: 10%;\n  border-bottom-right-radius: 10%;\n`;\n\nconst PartnerRow = styled(MyRow)`\n  justify-content: flex-start;\n`;\n\nconst PartnerMessage = styled.div`\n  width: 45%;\n  background-color: grey;\n  color: white;\n  border: 1px solid lightgray;\n  padding: 10px;\n  margin-left: 5px;\n  text-align: center;\n  border-top-left-radius: 10%;\n  border-bottom-left-radius: 10%;\n`;\n\nconst ChatRoom = (props: any) => {\n  console.log(\"vgj\");\n  const peerRef: any = useRef();\n  const sendChannel: any = useRef();\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages]: any = useState([]);\n  const socketRef: any = useRef();\n  const otherUser: any = useRef();\n\n  useEffect(() => {\n    socketRef.current = io(\"http://localhost:8000\");\n    socketRef.current.emit(\"join room\", props.match.params.roomID);\n\n    socketRef.current.on(\"other user\", (userID: any) => {\n      callUser(userID);\n      otherUser.current = userID;\n    });\n\n    socketRef.current.on(\"user joined\", (userID: any) => {\n      otherUser.current = userID;\n    });\n\n    socketRef.current.on(\"offer\", handleOffer);\n\n    socketRef.current.on(\"answer\", handleAnswer);\n\n    socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n  }, []);\n\n  function callUser(userID: string) {\n    peerRef.current = createPeer(userID);\n\n    sendChannel.current = peerRef.current.createDataChannel(\"sendChannel\");\n    sendChannel.current.onmessage = handleReceiveMessage;\n  }\n\n  function createPeer(userID?: string) {\n    const configuration = {\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    };\n    const peerConnection = new RTCPeerConnection(configuration);\n\n    peerConnection.onicecandidate = handleICECandidateEvent;\n    peerConnection.onnegotiationneeded = () =>\n      handleNegotiationNeededEvent(userID);\n\n    return peerConnection;\n  }\n\n  function handleICECandidateEvent(e: any) {\n    if (e.candidate) {\n      const payload = {\n        target: otherUser.current,\n        candidate: e.candidate,\n      };\n      socketRef.current.emit(\"ice-candidate\", payload);\n    }\n  }\n\n  function handleNegotiationNeededEvent(userID: any) {\n    peerRef.current\n      .createOffer()\n      .then((offer: any) => {\n        return peerRef.current.setLocalDescription(offer);\n      })\n      .then(() => {\n        const payload = {\n          target: userID,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription,\n        };\n        socketRef.current.emit(\"offer\", payload);\n      })\n      .catch((e: any) => console.log(e));\n  }\n\n  function handleReceiveMessage(e: any) {\n    setMessages((message: []) => [\n      ...message,\n      {\n        yours: false,\n        value: e.data,\n      },\n    ]);\n  }\n\n  function handleOffer(incoming: any) {\n    peerRef.current = createPeer();\n\n    peerRef.current.ondatachannel = (event: any) => {\n      sendChannel.current = event.channel;\n      sendChannel.current.onmessage = handleReceiveMessage;\n    };\n\n    const desc = new RTCSessionDescription(incoming.sdp);\n    peerRef.current\n      .setRemoteDescription(desc)\n      .then(() => {})\n      .then(() => {\n        return peerRef.current.createAnswer();\n      })\n      .then((answer: any) => {\n        return peerRef.current.setLocalDescription(answer);\n      })\n      .then(() => {\n        const payload = {\n          target: incoming.caller,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription,\n        };\n        socketRef.current.emit(\"answer\", payload);\n      });\n  }\n\n  function handleAnswer(message: any) {\n    const desc = new RTCSessionDescription(message.sdp);\n    peerRef.current\n      .setRemoteDescription(desc)\n      .catch((e: any) => console.log(e));\n  }\n\n  function handleNewICECandidateMsg(incoming: any) {\n    const candidate = new RTCIceCandidate(incoming);\n\n    peerRef.current\n      .addIceCandidate(candidate)\n      .catch((e: any) => console.log(e));\n  }\n\n  function handleChange(e: any) {\n    setText(e.target.value);\n  }\n\n  function sendMessage() {\n    sendChannel.current.send(text);\n    setMessages((messages: any) => [\n      ...messages,\n      {\n        yours: true,\n        value: text,\n      },\n    ]);\n    setText(\"\");\n  }\n\n  function renderMessage(message: any, index: any) {\n    if (message.yours) {\n      return (\n        <MyRow key={index}>\n          <MyMessage>{message.value}</MyMessage>\n        </MyRow>\n      );\n    }\n\n    return (\n      <PartnerRow key={index}>\n        <PartnerMessage>{message.value}</PartnerMessage>\n      </PartnerRow>\n    );\n  }\n\n  return (\n    <Container>\n      <Messages>{messages.map(renderMessage)}</Messages>\n      <MessageBox\n        value={text}\n        onChange={handleChange}\n        placeholder=\"Say something.....\"\n      />\n      <Button onClick={sendMessage}>Send..</Button>\n    </Container>\n  );\n};\n\nexport default ChatRoom;\n",{"ruleId":"22","severity":1,"message":"23","line":2,"column":8,"nodeType":"24","messageId":"25","endLine":2,"endColumn":12},{"ruleId":"22","severity":1,"message":"26","line":5,"column":50,"nodeType":"24","messageId":"25","endLine":5,"endColumn":54},{"ruleId":"27","severity":1,"message":"28","line":100,"column":6,"nodeType":"29","endLine":100,"endColumn":8,"suggestions":"30"},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callUser', 'handleOffer', and 'props.match.params.roomID'. Either include them or remove the dependency array.","ArrayExpression",["31"],{"desc":"32","fix":"33"},"Update the dependencies array to be: [callUser, handleOffer, props.match.params.roomID]",{"range":"34","text":"35"},[2177,2179],"[callUser, handleOffer, props.match.params.roomID]"]